https://raw.githubusercontent.com/theymaybecoders/sublime-tomorrow-theme/master/Tomorrow.tmTheme
plot(1:1,1:1)
getwd()
formula(x~y)
1+1
1+1
y_val=function(x,e_sd=2,b=1.2){
e=rnorm(1,0,e_sd)
y=b*x+e
return(y)
}
y_val=function(x,e_sd=2,b=1.2){
e=rnorm(1,0,e_sd)
y=b*x+e
return(y)
}
require(terra)
travel=read.csv("/Users/jespersonne/Library/Mobile Documents/com~apple~CloudDocs/CMEC projects/Polylepis sites/Locality data from Louis/Query_Traveling_data_only.txt")
out=rast("/Users/jespersonne/Downloads/raster_sites_2.0_2000m.tif")
out1=out
out1[which(is.na(out1[]))]=0
po=vect(data.frame(lon=travel$LONGITUDE[1000],lat=travel$LATITUDE)[1000],crs=crs(out,proj=T))
require(terra)
po=vect(data.frame(lon=travel$LONGITUDE[1000],lat=travel$LATITUDE)[1000],crs=crs(out,proj=T))
out=rast("/Users/jespersonne/Downloads/raster_sites_2.0_2000m.tif")
po=vect(data.frame(lon=travel$LONGITUDE[1000],lat=travel$LATITUDE)[1000]),crs=crs(out,proj=T)
data.frame(lon=travel$LONGITUDE[1000],lat=travel$LATITUDE)[1000])
po=vect(data.frame(lon=travel$LONGITUDE[1000],lat=travel$LATITUDE[1000]),crs=crs(out,proj=T)
po=vect(data.frame(lon=travel$LONGITUDE[1000],lat=travel$LATITUDE[1000]),crs=crs(out,proj=T))
head(po)
data.frame(lon=travel$LONGITUDE[1000],lat=travel$LATITUDE[1000])
po=vect(data.frame(lon=travel$LONGITUDE[1000],lat=travel$LATITUDE[1000]),crs=crs(out,proj=T))
bo=buffer(po,25*1000)
plot(bo)
plot(crop(out,bo))
travel$EFFORT.DISTANCE.KM
travel$EFFORT.DISTANCE.KM[1000]
bo=buffer(po,travel$EFFORT.DISTANCE.KM[1000]*1000)
plot(crop(out,bo))
hist(travel$EFFORT.DISTANCE.KM)
travel$EFFORT.DISTANCE.KM[1000]
nrow(traveel)
nrow(travel)
plot(out1)
out=rast("/Users/jespersonne/Downloads/raster_sites_2.0_2000m_SlopeCorrected.shp.tif")
out1=out
out1[which(is.na(out1[]))]=0
plot(out)
plot(crop(out,bo))
extract(out1,bo)
extract(out1,bo)$ETOPO1_Ice_g_geotiff
unique(extract(out1,bo)$ETOPO1_Ice_g_geotiff)
loc=unique(extract(out1,bo)$ETOPO1_Ice_g_geotiff)
length(loc)==1 & !loc==0
res_list=data.frame(sp=travel$SCIENTIFIC.NAME,locality=NA)
res_list=data.frame(sp=travel$SCIENTIFIC.NAME,locality=NA)
for(i in 1:nrow(travel)){
po=vect(data.frame(lon=travel$LONGITUDE[1000],lat=travel$LATITUDE[1000]),crs=crs(out,proj=T))
bo=buffer(po,travel$EFFORT.DISTANCE.KM[1000]*1000)
loc=unique(extract(out1,bo)$ETOPO1_Ice_g_geotiff)
if(length(loc)==1 & !loc==0){
res_list[i]=loc
} else {print(i)}
}
i
res_list=data.frame(sp=travel$SCIENTIFIC.NAME,locality=NA)
i
head(res_list)
res_list=data.frame(sp=travel$SCIENTIFIC.NAME,locality=NA)
for(i in 1:nrow(travel)){
po=vect(data.frame(lon=travel$LONGITUDE[i],lat=travel$LATITUDE[i]),crs=crs(out,proj=T))
bo=buffer(po,travel$EFFORT.DISTANCE.KM[i]*1000)
loc=unique(extract(out1,bo)$ETOPO1_Ice_g_geotiff)
if(length(loc)==1 & !loc==0){
res_list$locality[i]=loc
} else {print(i)}
}
i
po=vect(data.frame(lon=travel$LONGITUDE[i],lat=travel$LATITUDE[i]),crs=crs(out,proj=T))
bo=buffer(po,travel$EFFORT.DISTANCE.KM[i]*1000)
loc=unique(extract(out1,bo)$ETOPO1_Ice_g_geotiff)
loc
length(loc)==1
res_list=data.frame(sp=travel$SCIENTIFIC.NAME,locality=NA)
res_list=data.frame(sp=travel$SCIENTIFIC.NAME,locality=NA)
head(travel$SCIENTIFIC.NAME)
res_list=data.frame(sp=travel$SCIENTIFIC.NAME,locality=NA)
require(terra)
require(parallel)
setwd("C:/Users/hzc973/iCloudDrive/Documents/GitHub/Local-richness-and-turnover")
setwd("/Users/jespersonne/Downloads/Local-richness-and-turnover-main 5")
source("R functions.R")
#prepare the bacground raster
rr=rast(matrix(0,nrow=52,ncol=52))
ras_id=rr
ras_id[]=1:length(ras_id[])
coords=crds(ras_id)
sub_ras=ras_id
sub_ras[1,]=NA
sub_ras[,1]=NA
sub_ras[,52]=NA
sub_ras[52,]=NA
set.seed(123)
n_rep=100 # state the number of simmulations
#specify the frequency distribution of total species richness (i.e., following a log-normal distribution)
rich=round(rlnorm(n = max(rich),meanlog = 4,sdlog = 0.4))
#prepare the bacground raster
rr=rast(matrix(0,nrow=52,ncol=52))
ras_id=rr
ras_id[]=1:length(ras_id[])
coords=crds(ras_id)
sub_ras=ras_id
sub_ras[1,]=NA
sub_ras[,1]=NA
sub_ras[,52]=NA
sub_ras[52,]=NA
set.seed(123)
n_rep=100 # state the number of simmulations
#specify the frequency distribution of total species richness (i.e., following a log-normal distribution)
rich=round(rlnorm(n = max(rich),meanlog = 4,sdlog = 0.4))
#specify the frequency distribution of total species richness (i.e., following a log-normal distribution)
rich=round(rlnorm(n = max(rich),meanlog = 4,sdlog = 0.4))
#specify the frequency distribution of total species richness (i.e., following a log-normal distribution)
rich=round(rlnorm(n = n_rep,meanlog = 4,sdlog = 0.4))
hist(rich)
n_rep=10000 # state the number of simmulations
#specify the frequency distribution of total species richness (i.e., following a log-normal distribution)
rich=round(rlnorm(n = n_rep,meanlog = 4,sdlog = 0.4))
hist(rich)
#specify the frequency distribution of total species richness (i.e., following a log-normal distribution)
rich=round(rlnorm(n = n_rep,meanlog = 5,sdlog = 0.5))
hist(rich)
#specify the frequency distribution of species' range sizes (i.e., following a log-normal distribution)
rs=round(rlnorm(n = max(rich),meanlog = 5,sdlog = 0.5))
hist(rs)
set.seed(123)
n_rep=10000 # state the number of simmulations
#specify the frequency distribution of total species richness (i.e., following a log-normal distribution)
rich=round(rlnorm(n = n_rep,meanlog = 5,sdlog = 0.5))
hist(rich)
#specify the frequency distribution of species' range sizes (i.e., following a log-normal distribution)
rs=round(rlnorm(n = max(rich),meanlog = 5,sdlog = 0.5))
hist(rs)
set.seed(123)
n_rep=100 # state the number of simmulations
#specify the frequency distribution of total species richness (i.e., following a log-normal distribution)
rich=round(rlnorm(n = n_rep,meanlog = 5,sdlog = 0.5))
hist(rich)
#specify the frequency distribution of species' range sizes (i.e., following a log-normal distribution)
rs=round(rlnorm(n = max(rich),meanlog = 5,sdlog = 0.5))
hist(rs)
#running simmulations using paralell computation.
#might take a long time to run...
dat=data.frame(gamma=rep(NA,n_rep),alpha=NA,beta=NA)
set.seed(123)
n_rep=100 # state the number of simmulations
#specify the frequency distribution of total species richness (i.e., following a log-normal distribution)
rich=round(rlnorm(n = n_rep,meanlog = 5,sdlog = 0.5))
hist(rich)
set.seed(123)
n_rep=100 # state the number of simmulations
#specify the frequency distribution of total species richness (i.e., following a log-normal distribution)
rich=round(rlnorm(n = n_rep,meanlog = 5,sdlog = 0.5))
hist(rich)
set.seed(123)
n_rep=100 # state the number of simmulations
#specify the frequency distribution of total species richness (i.e., following a log-normal distribution)
rich=round(rlnorm(n = n_rep,meanlog = 5,sdlog = 0.5))
hist(rich)
set.seed(123)
n_rep=100 # state the number of simmulations
#specify the frequency distribution of total species richness (i.e., following a log-normal distribution)
rich=round(rlnorm(n = n_rep,meanlog = 4,sdlog = 0.5))
hist(rich)
set.seed(123)
n_rep=100 # state the number of simmulations
#specify the frequency distribution of total species richness (i.e., following a log-normal distribution)
rich=round(rlnorm(n = n_rep,meanlog = 3,sdlog = 0.5))
hist(rich)
set.seed(123)
n_rep=100 # state the number of simmulations
#specify the frequency distribution of total species richness (i.e., following a log-normal distribution)
rich=round(rlnorm(n = n_rep,meanlog = 3,sdlog = 1))
hist(rich)
set.seed(123)
n_rep=100 # state the number of simmulations
#specify the frequency distribution of total species richness (i.e., following a log-normal distribution)
rich=round(rlnorm(n = n_rep,meanlog = 5,sdlog = 1))
hist(rich)
#specify the frequency distribution of species' range sizes (i.e., following a log-normal distribution)
rs=round(rlnorm(n = max(rich),meanlog = 5,sdlog = 0.5))
hist(rs)
set.seed(123)
n_rep=100 # state the number of simmulations
#specify the frequency distribution of total species richness (i.e., following a log-normal distribution)
rich=round(rlnorm(n = n_rep,meanlog = 5,sdlog = 1))
hist(rich)
#specify the frequency distribution of species' range sizes (i.e., following a log-normal distribution)
rs=round(rlnorm(n = max(rich),meanlog = 5,sdlog = 1))
hist(rs)
set.seed(123)
n_rep=100 # state the number of simmulations
#specify the frequency distribution of total species richness (i.e., following a log-normal distribution)
rich=round(rlnorm(n = n_rep,meanlog = 5,sdlog = 1))
hist(rich)
#specify the frequency distribution of species' range sizes (i.e., following a log-normal distribution)
rs=round(rlnorm(n = max(rich),meanlog = 5,sdlog = 0.5))
hist(rs)
#running simmulations using paralell computation.
#might take a long time to run...
dat=data.frame(gamma=rep(NA,n_rep),alpha=NA,beta=NA)
for(i in 1:n_rep){
#sample species richness and and their range sizes
sp_rich=rich[i]
ra=sample(rs,sp_rich,prob = rs,replace = F)
#simmulate distributions (optional: specify the number of cores allocated)
res=mclapply(X=ra,FUN = spred_dye,dis_mat = NULL,sf1 = sub_ras,mc.cores = 8)
#calculate local species richness and species turnover
res=unlist(res)
sub_vol=ras_id
sub_vol[]=0
id=as.numeric(names(table(res)))
alpha=as.numeric(table(res))
sub_vol[id]=alpha
sub_vol[which(is.na(ras_id[]))]=NA
#plot(sub_vol,axes=F)
dat$gamma[i]=sp_rich
dat$alpha[i]=mean(sub_vol[])
dat$beta[i]=sp_rich/mean(sub_vol[])
plot(dat$alpha,dat$beta-1,xlab="local species richness",ylab="Species turnover")
print(i)
}
setwd("/Users/jespersonne/Library/Mobile Documents/com~apple~CloudDocs/CMEC projects/Hotspots of endemism/revision analyses/Simulations")
setwd("/Users/jespersonne/Library/Mobile Documents/com~apple~CloudDocs/CMEC projects/Hotspots of endemism/revision analyses/Simulations")
pdf(file = "correlation.pdf",   # The directory you want to save the file in
width = 7,height = 5)
plot(dat$alpha,dat$beta-1,xlab="local species richness",ylab="Species turnover")
dev.off()
hist(rich,xlab="Total species richness")
hist(rs,"Species range size")
par(mfrow(2,1))
par(mfrow=c(2,1))
hist(rich,xlab="Total species richness")
hist(rs,xlab="Species range size")
pdf(file = "histograms.pdf",   # The directory you want to save the file in
width = 5,height = 10)
par(mfrow=c(2,1))
hist(rich,xlab="Total species richness")
hist(rs,xlab="Species range size")
dev.off()
pdf(file = "histograms.pdf",   # The directory you want to save the file in
width = 5,height = 10)
par(mfrow=c(2,1))
hist(rich,xlab="Total species richness",main="")
hist(rs,xlab="Species range size",main="")
dev.off()
setwd("/Users/jespersonne/Library/Mobile Documents/com~apple~CloudDocs/CMEC projects/Hotspots of endemism/revision analyses/Simulations")
pdf(file = "correlation.pdf",   # The directory you want to save the file in
width = 5,height = 5)
plot(dat$alpha,dat$beta-1,xlab="local species richness",ylab="Species turnover")
dev.off()
27.94/21.59
#Functions used for calculating similarities between two groups with respect to binary, categorical and continuous data types
#All functions were retrived from Geange, Shane W., et al. "A unified analysis of niche overlap incorporating data of different types." Methods in Ecology and Evolution 2.2 (2011): 175-184.
source("R functions.R")
############################################## calculating overlap probability
setwd("/Users/jespersonne/Documents/GitHub/Local-richness-and-turnover")
#Functions used for calculating similarities between two groups with respect to binary, categorical and continuous data types
#All functions were retrived from Geange, Shane W., et al. "A unified analysis of niche overlap incorporating data of different types." Methods in Ecology and Evolution 2.2 (2011): 175-184.
source("R functions.R")
#loading summarized data for each mountain region
loc=read.csv("Data files/data per mountain region.csv")
pos_rm=which(loc$total_richness<100) # excluding mountain regions with less than 100 species
loc1=loc
loc1[pos_rm,]=NA
## empirical patterns
gamma=loc$total_richness
beta=loc$Species.turnover
alpha=loc$local_richness
gamma[pos_rm]=NA
alpha[pos_rm]=NA
beta[pos_rm]=NA
pattern="Raw"
# define proportion used to shortlist mountain regions with the highest local species richness and turnover (10% used in the study)
prop=0.1
nn=round(length(which(!is.na(alpha)))*prop)
nr1=order(beta,decreasing = T)[1:nn]
nr2=order(alpha,decreasing = T)[1:nn]
nr3=c(nr1,nr2)[which(duplicated(c(nr1,nr2)))]
nr4=order(gamma,decreasing = T)[1:nn]
dd=data.frame(v1=loc$mount.Name[nr4],v2=round(gamma[nr4]),v3=NA,v4=NA)
nn2=loc$mount.Name[nr2]
dd=rbind(dd,data.frame(v1=nn2[which(!nn2 %in% dd$v1)],v2=NA,v3=NA,v4=NA))
nn1=loc$mount.Name[nr1]
dd=rbind(dd,data.frame(v1=nn1[which(!nn1 %in% dd$v1)],v2=NA,v3=NA,v4=NA))
dd$v3[match(nn2,dd$v1)]=round(alpha[nr2])
dd$v4[match(nn1,dd$v1)]=round(beta[nr1],2)
dd
?mask
??legend_2d
############################################## calculating overlap probability
setwd("/Users/jespersonne/Documents/GitHub/Local-richness-and-turnover")
#Functions used for calculating similarities between two groups with respect to binary, categorical and continuous data types
#All functions were retrived from Geange, Shane W., et al. "A unified analysis of niche overlap incorporating data of different types." Methods in Ecology and Evolution 2.2 (2011): 175-184.
source("R functions.R")
legend_2d
??legend_2d
source("/Users/jespersonne/Library/Mobile Documents/com~apple~CloudDocs/CMEC projects/Hotspots of endemism/trial 2/custom functions.R")
legend_2d()
legend_2d
